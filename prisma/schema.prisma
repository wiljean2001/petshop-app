// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = [""]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? //@db.Text
//   access_token      String? //@db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? //@db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  roleId        String // Nuevo campo para relacionar User con Role
  role          Role      @relation("UserRole", fields: [roleId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // accounts      Account[]
  // sessions      Session[]
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  users       User[]       @relation("UserRole")
  permissions Permission[] // Relación muchos a muchos con Permission
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @default(cuid())
  name      String   @unique
  roles     Role[] // Relación muchos a muchos con Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id           String         @id @default(cuid())
  name         String
  location     String
  phone        String?
  image        String?
  Schedule     Schedule[]
  Veterinarian Veterinarian[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Schedule {
  id          String    @id @default(cuid())
  day_week    String
  clinicId    String
  clinic      Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  openingHour DateTime?
  closingHour DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Veterinarian {
  id        String   @id @default(cuid())
  name      String
  surname   String
  clinicId  String?
  clinic    Clinic?  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  phone     String
  specialty String
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Owner {
  id        String   @id @default(cuid())
  name      String
  surname   String
  city      String?
  address   String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Pet       Pet[]
}

model Specie {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Breed     Breed[]
}

model Breed {
  id        String   @id @default(cuid())
  specieId  String?  @unique
  specie    Specie?  @relation(fields: [specieId], references: [id], onDelete: Cascade)
  name      String
  Pet       Pet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id        String   @id @default(cuid())
  name      String
  birthdate DateTime
  gender    String
  ownerId   String?
  owner     Owner?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  breedId   String?
  breed     Breed?   @relation(fields: [breedId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum States_services {
  ACTIVO
  INACTIVO
  DESCONTINUADO
}

model Service {
  id          String          @id @default(cuid())
  name        String
  description String
  cost        Float
  duration    Int
  state       States_services
}
