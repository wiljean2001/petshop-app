generator client {
  provider = "prisma-client-js"
  // previewFeatures = [""]
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  user
  admin
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Roles?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Owner         Owner[]
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id             String           @id @default(cuid())
  name           String
  location       String
  phone          String?
  image          String?
  Veterinarian   Veterinarian[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ClinicSchedule ClinicSchedule[]
}

model Schedule {
  id             String           @id @default(cuid())
  dayWeek        String           @unique
  openingHour    String?
  closingHour    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ClinicSchedule ClinicSchedule[]
}

model ClinicSchedule {
  clinicId   String
  scheduleId String
  clinic     Clinic   @relation(fields: [clinicId], references: [id])
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  @@id([clinicId, scheduleId])
}

model Veterinarian {
  id           String         @id @default(cuid())
  name         String
  surname      String
  clinicId     String
  phone        String
  specialty    String
  email        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  clinic       Clinic?        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  Appointments Appointments[]
}

model Owner {
  id        String   @id @default(cuid())
  name      String
  surname   String
  city      String?
  address   String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Pet       Pet[]
  userId    String
  user      User?    @relation(fields: [userId], references: [id])
}

model Specie {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Breed     Breed[]
}

model Breed {
  id        String   @id @default(cuid())
  specieId  String?
  name      String
  Pet       Pet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  specie    Specie?  @relation(fields: [specieId], references: [id], onDelete: Cascade)
}

model Pet {
  id           String         @id @default(cuid())
  name         String
  birthdate    DateTime?
  gender       String
  color        String
  medicalNotes String?
  derivedFrom  String?
  ownerId      String
  breedId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  owner        Owner          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  breed        Breed          @relation(fields: [breedId], references: [id], onDelete: Cascade)
  Appointments Appointments[]
}

enum States_services {
  ACTIVE
  INACTIVE
  UNCONTINUED
}

model Service {
  id                   String                @id @default(cuid())
  name                 String
  image                String
  description          String
  cost                 Float
  duration             Int
  state                States_services
  requiresClinicalData Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  ServiceDetails       ServiceDetails[]
  ServiceAppointments  ServiceAppointments[]
}

model ServiceDetails {
  id         String   @id @default(cuid())
  serviceId  String
  detailType String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROCESS
  COMPLETED
  CANCELED
  NO_SHOW
}

model Appointments {
  id                  String                @id @default(cuid())
  petId               String
  vetId               String
  scheduledDateTime   DateTime
  beginningDateTime   DateTime?
  status              AppointmentStatus
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  pet                 Pet                   @relation(fields: [petId], references: [id], onDelete: Cascade)
  veterinarian        Veterinarian          @relation(fields: [vetId], references: [id], onDelete: Cascade)
  ServiceAppointments ServiceAppointments[]
  Attendances         Attendances?
}

model ServiceAppointments {
  id             String        @id @default(cuid())
  appointmentId  String
  serviceId      String
  date           DateTime
  details        String
  cost           Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointment    Appointments  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service        Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  clinicalDataId String?       @unique
  clinicalData   ClinicalData? @relation(fields: [clinicalDataId], references: [id])
}

model ClinicalData {
  id                   String               @id @default(cuid())
  serviceAppointmentId String               @unique
  registrationDate     DateTime
  weight               Float?
  height               Float?
  temperature          Float?
  vitalSigns           String?
  extras               String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  // serviceAppointment   ServiceAppointments @relation(fields: [serviceAppointmentId], references: [id], onDelete: Cascade)
  ServiceAppointments  ServiceAppointments?
}

model Attendances {
  id            String        @id @default(cuid())
  appointmentId String        @unique
  date          DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Prescription  Prescription?
  appointment   Appointments  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  Diagnostics   Diagnostics?
}

enum DiagnosisStatus {
  RESOLVED
  TREATMENT
}

model Diagnostics {
  id            String          @id @default(cuid())
  attendanceId  String          @unique
  description   String
  diagnosisDate DateTime
  status        DiagnosisStatus
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  attendance    Attendances     @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
}

enum PrescribedItemType {
  MEDICATION
  DIET
  RECOMMENDATION
  OTHER
}

model Prescription {
  id             String            @id @default(cuid())
  attendanceId   String            @unique
  emissionDate   DateTime
  instructions   String
  prescribedItem PrescribedItems[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  attendance     Attendances       @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
}

model PrescribedItems {
  id             String             @id @default(cuid())
  prescriptionId String
  type           PrescribedItemType
  description    String
  dosage         String?
  instructions   String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  prescription   Prescription       @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
}
