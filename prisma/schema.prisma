// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = [""]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? //@db.Text
//   access_token      String? //@db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? //@db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  roleId        String // Nuevo campo para relacionar User con Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // accounts      Account[]
  // sessions      Session[]
  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id             String           @id @default(cuid())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User[]
  RolePermission RolePermission[]
}

model Permission {
  id             String           @id @default(cuid())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RolePermission RolePermission[]
}

model RolePermission {
  RoleId       String
  permissionId String
  role         Role       @relation(fields: [RoleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([RoleId, permissionId])
}

model Clinic {
  id             String           @id @default(cuid())
  name           String
  location       String
  phone          String?
  image          String?
  Veterinarian   Veterinarian[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ClinicSchedule ClinicSchedule[]
}

model Schedule {
  id             String           @id @default(cuid())
  day_week       String           @unique
  openingHour    String?
  closingHour    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ClinicSchedule ClinicSchedule[]
}

model ClinicSchedule {
  clinicId   String
  scheduleId String
  clinic     Clinic   @relation(fields: [clinicId], references: [id])
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  @@id([clinicId, scheduleId])
}

model Veterinarian {
  id           String         @id @default(cuid())
  name         String
  surname      String
  clinicId     String?
  phone        String
  specialty    String
  email        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  clinic       Clinic?        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  Appointments Appointments[]
}

model Owner {
  id        String   @id @default(cuid())
  name      String
  surname   String
  city      String?
  address   String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Pet       Pet[]
}

model Specie {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Breed     Breed[]
}

model Breed {
  id        String   @id @default(cuid())
  specieId  String?  @unique
  name      String
  Pet       Pet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  specie    Specie?  @relation(fields: [specieId], references: [id], onDelete: Cascade)
}

model Pet {
  id           String         @id @default(cuid())
  name         String
  birthdate    DateTime?
  gender       String
  ownerId      String
  breedId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  owner        Owner          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  breed        Breed          @relation(fields: [breedId], references: [id], onDelete: Cascade)
  Appointments Appointments[]
}

enum States_services {
  ACTIVO
  INACTIVO
  DESCONTINUADO
}

model Service {
  id                String              @id @default(cuid())
  name              String
  image             String
  description       String
  cost              Float
  duration          Int
  state             States_services
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ServiceDetails    ServiceDetails[]
  ServiceAttentions ServiceAttentions[]
}

model ServiceDetails {
  id         String   @id @default(cuid())
  serviceId  String
  detailType String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROCESS
  COMPLETED
  CANCELED
  NO_SHOW
}

model Appointments {
  id           String            @id @default(cuid())
  petId        String
  vetId        String
  dateTime     DateTime
  status       AppointmentStatus
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  pet          Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  veterinarian Veterinarian      @relation(fields: [vetId], references: [id], onDelete: Cascade)
  Attendances  Attendances[]
}


model ServiceAttentions {
  id           String         @id @default(cuid())
  attentionId  String
  serviceId    String
  date         DateTime
  details      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  attendance   Attendances    @relation(fields: [attentionId], references: [id], onDelete: Cascade)
  service      Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  ClinicalData ClinicalData[]
}

model Attendances {
  id                String              @id @default(cuid())
  appointmentId     String
  date              DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  appointment       Appointments        @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  ServiceAttentions ServiceAttentions[]
  Diagnostics       Diagnostics[]
  Prescription      Prescription[]
}

enum DiagnosisStatus {
  RESOLVED
  CHRONIC
}

model Diagnostics {
  id            String          @id @default(cuid())
  attendanceId  String
  description   String
  diagnosisDate DateTime
  status        DiagnosisStatus
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  attendance    Attendances     @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
}

model ClinicalData {
  id                 String            @id @default(cuid())
  serviceAttentionId String
  registrationDate   DateTime
  weight             Float
  height             Float
  temperature        Float
  vitalSigns         String
  extras             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  serviceAttention   ServiceAttentions @relation(fields: [serviceAttentionId], references: [id], onDelete: Cascade)
}

model Prescription {
  id             String            @id @default(cuid())
  attendanceId   String
  emissionDate   DateTime
  instructions   String
  prescribedItem PrescribedItems[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  attendance     Attendances       @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
}

enum PrescribedItemType {
  MEDICATION
  DIET
  RECOMMENDATION
  OTHER
}

model PrescribedItems {
  id             String             @id @default(cuid())
  prescriptionId String
  type           PrescribedItemType
  description    String
  dosage         String
  instructions   String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  prescription   Prescription       @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
}
